/*
 * MainGui.java
 *
 * Created on 09-may-2011, 18:41:31
 */
package edu.ub.prog2.QuitaquisTamayDennis.vista;

import edu.ub.prog2.QuitaquisTamayDennis.controlador.CtrlReproductor;
import edu.ub.prog2.QuitaquisTamayDennis.model.Fitxer;
import edu.ub.prog2.QuitaquisTamayDennis.model.FitxerAudio;
import edu.ub.prog2.QuitaquisTamayDennis.model.LlistaReproduccio;
import edu.ub.prog2.utils.FitxerAudioErrorException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Serializable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Maikel
 */
public class MainGui extends javax.swing.JFrame implements Serializable {

    private CtrlReproductor ctrl;
    private DefaultListModel llistaBiblioteca;
    private DefaultListModel conjLlistes;

    /** Creates new form MainGui */
    public MainGui(CtrlReproductor ctrl) {
        try {

            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");

        } catch (ClassNotFoundException ex) {

            System.out.println(ex.getMessage());

        } catch (InstantiationException ex) {

            System.out.println(ex.getMessage());

        } catch (IllegalAccessException ex) {

            System.out.println(ex.getMessage());

        } catch (UnsupportedLookAndFeelException ex) {

            System.out.println(ex.getMessage());

        }

        llistaBiblioteca = new DefaultListModel();
        conjLlistes = new DefaultListModel();

        initComponents();
        this.ctrl = ctrl;

        jButtonAddBiblioteca.setEnabled(false);
        jButtonRemoveBiblioteca.setEnabled(false);
        jButtonRemoveList.setEnabled(false);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuLibrary = new javax.swing.JPopupMenu();
        jMenuItemPlaySelectFile = new javax.swing.JMenuItem();
        jMenuItemPlayAllLibrary = new javax.swing.JMenuItem();
        jMenuItemRemoveOfLibrary = new javax.swing.JMenuItem();
        jMenuItemRemoveAll = new javax.swing.JMenuItem();
        jPopupMenuLists = new javax.swing.JPopupMenu();
        jMenuItemNewList = new javax.swing.JMenuItem();
        jMenuItemRemoveList = new javax.swing.JMenuItem();
        jTextFileEntry = new javax.swing.JTextField();
        jTextFile = new javax.swing.JTextField();
        jButtonOpen = new javax.swing.JButton();
        jButtonPlay = new javax.swing.JButton();
        jButtonStop = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jButtonPrevius = new javax.swing.JButton();
        jTabbedLibraryLists = new javax.swing.JTabbedPane();
        jPanelLibrary = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListBiblioteca = new javax.swing.JList();
        jButtonRemoveBiblioteca = new javax.swing.JButton();
        jButtonAddBiblioteca = new javax.swing.JButton();
        jButtonPlayLibrary = new javax.swing.JButton();
        jButtonLoadLibrary = new javax.swing.JButton();
        jButtonSaveLibrary = new javax.swing.JButton();
        jPanelConjLists = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListConjLists = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListListOfConjLists = new javax.swing.JList();
        jButtonNewList = new javax.swing.JButton();
        jButtonRemoveList = new javax.swing.JButton();
        jButtonAddFileToList = new javax.swing.JButton();
        jButtonRemoveFileOfList = new javax.swing.JButton();
        jButtonPlayList = new javax.swing.JButton();
        jButtonPlaySelectedFileOfList = new javax.swing.JButton();
        jRadioButtonRandom = new javax.swing.JRadioButton();
        jRadioButtonCyclic = new javax.swing.JRadioButton();
        jTextFieldPlatingFile = new javax.swing.JTextField();
        jTextFieldPlaying = new javax.swing.JTextField();

        jMenuItemPlaySelectFile.setText("play select file");
        jMenuItemPlaySelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPlaySelectFileActionPerformed(evt);
            }
        });
        jPopupMenuLibrary.add(jMenuItemPlaySelectFile);

        jMenuItemPlayAllLibrary.setText("play all library");
        jMenuItemPlayAllLibrary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPlayAllLibraryActionPerformed(evt);
            }
        });
        jPopupMenuLibrary.add(jMenuItemPlayAllLibrary);

        jMenuItemRemoveOfLibrary.setText("remove");
        jMenuItemRemoveOfLibrary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRemoveOfLibraryActionPerformed(evt);
            }
        });
        jPopupMenuLibrary.add(jMenuItemRemoveOfLibrary);

        jMenuItemRemoveAll.setText("remove all");
        jMenuItemRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRemoveAllActionPerformed(evt);
            }
        });
        jPopupMenuLibrary.add(jMenuItemRemoveAll);

        jMenuItemNewList.setText("new List");
        jMenuItemNewList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewListActionPerformed(evt);
            }
        });
        jPopupMenuLists.add(jMenuItemNewList);

        jMenuItemRemoveList.setText("remove list");
        jMenuItemRemoveList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRemoveListActionPerformed(evt);
            }
        });
        jPopupMenuLists.add(jMenuItemRemoveList);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MP3 Player");

        jTextFileEntry.setEditable(false);

        jTextFile.setEditable(false);
        jTextFile.setText("File:");

        jButtonOpen.setText("Open");
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        jButtonPlay.setText("Play");
        jButtonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayActionPerformed(evt);
            }
        });

        jButtonStop.setText("Stop");
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });

        jButtonNext.setText("Next");
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        jButtonPrevius.setText("Previus");
        jButtonPrevius.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreviusActionPerformed(evt);
            }
        });

        jListBiblioteca.setModel(llistaBiblioteca);
        jListBiblioteca.setComponentPopupMenu(jPopupMenuLibrary);
        jScrollPane1.setViewportView(jListBiblioteca);

        jButtonRemoveBiblioteca.setText("remove of Library");
        jButtonRemoveBiblioteca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveBibliotecaActionPerformed(evt);
            }
        });

        jButtonAddBiblioteca.setText("add to Library");
        jButtonAddBiblioteca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddBibliotecaActionPerformed(evt);
            }
        });

        jButtonPlayLibrary.setText("play the Library");
        jButtonPlayLibrary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayLibraryActionPerformed(evt);
            }
        });

        jButtonLoadLibrary.setText("load Library");
        jButtonLoadLibrary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadLibraryActionPerformed(evt);
            }
        });

        jButtonSaveLibrary.setText("save Library");
        jButtonSaveLibrary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveLibraryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLibraryLayout = new javax.swing.GroupLayout(jPanelLibrary);
        jPanelLibrary.setLayout(jPanelLibraryLayout);
        jPanelLibraryLayout.setHorizontalGroup(
            jPanelLibraryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLibraryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelLibraryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonRemoveBiblioteca, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(jButtonPlayLibrary, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(jButtonAddBiblioteca, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(jButtonLoadLibrary, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(jButtonSaveLibrary, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelLibraryLayout.setVerticalGroup(
            jPanelLibraryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLibraryLayout.createSequentialGroup()
                .addGroup(jPanelLibraryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLibraryLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jButtonAddBiblioteca)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemoveBiblioteca)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPlayLibrary)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLoadLibrary)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSaveLibrary))
                    .addGroup(jPanelLibraryLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedLibraryLists.addTab("Library", jPanelLibrary);

        jListConjLists.setModel(conjLlistes);
        jListConjLists.setComponentPopupMenu(jPopupMenuLists);
        jListConjLists.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListConjListsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jListConjLists);

        jScrollPane3.setViewportView(jListListOfConjLists);

        jButtonNewList.setText("new List");
        jButtonNewList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewListActionPerformed(evt);
            }
        });

        jButtonRemoveList.setText("remove List");
        jButtonRemoveList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveListActionPerformed(evt);
            }
        });

        jButtonAddFileToList.setText("from library add file to list");
        jButtonAddFileToList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddFileToListActionPerformed(evt);
            }
        });

        jButtonRemoveFileOfList.setText("remove file of list");
        jButtonRemoveFileOfList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveFileOfListActionPerformed(evt);
            }
        });

        jButtonPlayList.setText("play the List");
        jButtonPlayList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayListActionPerformed(evt);
            }
        });

        jButtonPlaySelectedFileOfList.setText("Play the selected file of list");
        jButtonPlaySelectedFileOfList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaySelectedFileOfListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConjListsLayout = new javax.swing.GroupLayout(jPanelConjLists);
        jPanelConjLists.setLayout(jPanelConjListsLayout);
        jPanelConjListsLayout.setHorizontalGroup(
            jPanelConjListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConjListsLayout.createSequentialGroup()
                .addGroup(jPanelConjListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonNewList, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonRemoveList))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanelConjListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonPlayList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAddFileToList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonRemoveFileOfList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonPlaySelectedFileOfList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelConjListsLayout.setVerticalGroup(
            jPanelConjListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConjListsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConjListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                    .addGroup(jPanelConjListsLayout.createSequentialGroup()
                        .addComponent(jButtonPlayList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelConjListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelConjListsLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jButtonNewList)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonRemoveList))
                            .addComponent(jButtonPlaySelectedFileOfList))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                        .addComponent(jButtonAddFileToList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemoveFileOfList)))
                .addContainerGap())
        );

        jTabbedLibraryLists.addTab("Lists", jPanelConjLists);

        jRadioButtonRandom.setText("Random");
        jRadioButtonRandom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonRandomItemStateChanged(evt);
            }
        });

        jRadioButtonCyclic.setText("Cyclic");
        jRadioButtonCyclic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCyclicItemStateChanged(evt);
            }
        });

        jTextFieldPlatingFile.setEditable(false);

        jTextFieldPlaying.setEditable(false);
        jTextFieldPlaying.setText("Playing:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jTextFieldPlaying, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldPlatingFile, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(417, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedLibraryLists, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonPrevius)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFile, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFileEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonOpen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRadioButtonRandom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonCyclic)))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPlaying, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPlatingFile, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedLibraryLists, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPrevius)
                    .addComponent(jButtonPlay)
                    .addComponent(jButtonNext)
                    .addComponent(jButtonStop)
                    .addComponent(jTextFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFileEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOpen)
                    .addComponent(jRadioButtonRandom)
                    .addComponent(jRadioButtonCyclic))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Butó que obre un JFileChooser, i permet a l'usuari seleccionar un o més d'un fitxer, per afegir-ho a la biblioteca.
     * 
     * @param evt 
     */
    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed

        //Creoamos una nueva ventana de dialogo del tipo JFileChooser
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);


        //Habilitamos la opcion multi-seleccion
        if (!fc.isMultiSelectionEnabled()) {

            fc.setMultiSelectionEnabled(true);

        }


        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            //Gurdem totes els fitxers seleccionats en una array
            File[] files = fc.getSelectedFiles();

            //Si la longitud de la array es un, vol dir que a lo millo nomes vol escoltar aquella canço
            if (files.length == 1) {

                //Pero aixo ho fiquem en el textFile
                jTextFileEntry.setText(files[0].toString());
                //I habilitem el buto de afegir a la biblioteca
                jButtonAddBiblioteca.setEnabled(true);

            } else {

                //Si la longitud es mes de 1, afegim directament tots els fitxers a la biblioteca
                for (int i = 0; i < files.length; i++) {

                    String ruta = files[i].getAbsolutePath();
                    Fitxer fitxer = ctrl.tractarRuta(ruta);
                    FitxerAudio fitxerAudio = new FitxerAudio(fitxer.getRutaFitxer(), fitxer.getNomFitxer(), fitxer.getExtensioFitxer());
                    llistaBiblioteca.addElement(fitxerAudio.getNomExtensio());

                    if (ctrl.isPlay()) {

                        ctrl.afegirFitxerMiBiblioteca(fitxerAudio);
                        ctrl.getCuaReproduccio().afegirAudio(fitxerAudio);

                    } else {

                        ctrl.afegirFitxerMiBiblioteca(fitxerAudio);

                    }

                    //Compruebo si se inserta en la ED biblioteca.
                    //System.out.println("###########");
                    //System.out.println("BIBLIOTECA");
                    //System.out.println("-------------");
                    //for (FitxerAudio f : ctrl.obteMiBiblioteca()) {
                    //System.out.println(f.getNomFitxer());

                    //}
                    //System.out.println("###########");

                    jTextFileEntry.setText("");
                    jButtonRemoveBiblioteca.setEnabled(true);

                }
            }
        }
    }//GEN-LAST:event_jButtonOpenActionPerformed
    private void jButtonAddBibliotecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddBibliotecaActionPerformed

        try {

            String ruta = jTextFileEntry.getText();
            Fitxer fitxer = ctrl.tractarRuta(ruta);
            FitxerAudio fitxerAudio = new FitxerAudio(fitxer.getRutaFitxer(), fitxer.getNomFitxer(), fitxer.getExtensioFitxer());
            llistaBiblioteca.addElement(fitxerAudio.getNomExtensio());

            if (ctrl.isPlay()) {

                ctrl.afegirFitxerMiBiblioteca(fitxerAudio);
                ctrl.getCuaReproduccio().afegirAudio(fitxerAudio);

            } else {

                ctrl.afegirFitxerMiBiblioteca(fitxerAudio);

            }

            //Compruebo si se inserta en la ED biblioteca.
            //System.out.println("###########");
            //System.out.println("BIBLIOTECA");
            //System.out.println("-------------");
            //for (FitxerAudio f : ctrl.obteMiBiblioteca()) {
                //System.out.println(f.getNomFitxer());

            //}
            //System.out.println("###########");

            jButtonRemoveBiblioteca.setEnabled(true);


        } catch (java.lang.StringIndexOutOfBoundsException ex) {

            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

        }

        jButtonRemoveBiblioteca.setEnabled(true);

    }//GEN-LAST:event_jButtonAddBibliotecaActionPerformed

    /**
     *  Butó que para la reproducció
     * @param evt 
     */
    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed

        if (!ctrl.obteMiBiblioteca().isEmpty() || ctrl.isPlay()) {
            ctrl.parar();
        }
    }//GEN-LAST:event_jButtonStopActionPerformed

    /**
     * Butó que avança en la cua de reproducció una posició
     * @param evt 
     */
    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed

        if (jListBiblioteca.getModel().getSize() > 1 || ctrl.isPlay()) {
            ctrl.seguent();

            try {
                jTextFieldPlatingFile.setText(ctrl.getFitxerAudioSonant().getNomExtensio());
            } catch (Exception ex) {
                ex.getMessage();
            }
        }

    }//GEN-LAST:event_jButtonNextActionPerformed

    /**
     * Butó que retrocedeix en la cua de reproducció una posició
     * @param evt 
     */
    private void jButtonPreviusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreviusActionPerformed

        if (jListBiblioteca.getModel().getSize() > 1 || ctrl.isPlay()) {
            ctrl.anterior();
            jTextFieldPlatingFile.setText(ctrl.getFitxerAudioSonant().getNomExtensio());
        }

    }//GEN-LAST:event_jButtonPreviusActionPerformed

    /**
     * Butó que elimina un fitxer de la biblioteca que estigui seleccionat
     * @param evt 
     */
    private void jButtonRemoveBibliotecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveBibliotecaActionPerformed

        if (jListBiblioteca.isSelectionEmpty()) {

            JOptionPane.showMessageDialog(this, "Select a file first!", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else {

            if (ctrl.obteMiBiblioteca().get(jListBiblioteca.getSelectedIndex()) == ctrl.getFitxerAudioSonant()) {

                ctrl.parar();

            }

            llistaBiblioteca.removeElementAt(jListBiblioteca.getSelectedIndex());

            //System.out.println(jListBiblioteca.getSelectedIndex());

            ctrl.eliminarFitxerMiBiblioteca(jListBiblioteca.getSelectedIndex() + 1);

            //System.out.println("###########");
            //System.out.println("AFTER REMOVE");
            //System.out.println("-------------");
            //for (FitxerAudio f : ctrl.obteMiBiblioteca()) {

            //System.out.println(f.getNomExtensio());
            //}
            //System.out.println("###########");

            if (llistaBiblioteca.isEmpty()) {
                jButtonRemoveBiblioteca.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jButtonRemoveBibliotecaActionPerformed

    /**
     * Butó que reprodueix el fitxer que hi ha en la sortida del text, FileEntry
     * o reprodueix algun element de la biblioteca si es troba seleccionat
     * @param evt 
     */
    private void jButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayActionPerformed

        if (!jListBiblioteca.isSelectionEmpty()) {

            if (ctrl.isPlay()) {
                ctrl.parar();
            }

            try {

                ctrl.reproduir(ctrl.obteMiBiblioteca().get(jListBiblioteca.getSelectedIndex()));
                jTextFieldPlatingFile.setText(ctrl.getFitxerAudioSonant().getNomExtensio());

            } catch (FitxerAudioErrorException ex) {

                JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

            }

        } else if (!"".equals(jTextFileEntry.getText()) && jListBiblioteca.isSelectionEmpty()) {

            Fitxer f = ctrl.tractarRuta(jTextFileEntry.getText());
            FitxerAudio fa = new FitxerAudio(f.getRutaFitxer(), f.getNomFitxer(), f.getExtensioFitxer());

            if (ctrl.isPlay()) {
                ctrl.parar();
            }

            try {

                ctrl.reproduir(fa);

            } catch (FitxerAudioErrorException ex) {

                Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);

            }
            jTextFieldPlatingFile.setText(f.getNomFitxer() + "." + f.getExtensioFitxer());

        } else {

            JOptionPane.showMessageDialog(this, "Open a File First!", "ERROR", JOptionPane.ERROR_MESSAGE);

        }


    }//GEN-LAST:event_jButtonPlayActionPerformed

    /**
     * Butó que crea una nova llista, preguntant a l'usuari mitjançant una ventana emergent
     * el nom de la llista
     * @param evt 
     */
    private void jButtonNewListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewListActionPerformed

        String nom = JOptionPane.showInputDialog("Name of the list?");
        ctrl.crearLlistaRepro(nom);
        conjLlistes.addElement(nom);

        jButtonRemoveList.setEnabled(true);

    }//GEN-LAST:event_jButtonNewListActionPerformed

    /**
     * Butó que elimina una llista que estigui seleccionada
     * @param evt 
     */
    private void jButtonRemoveListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveListActionPerformed

        if (jListConjLists.isSelectionEmpty()) {

            JOptionPane.showMessageDialog(this, "First select a list!", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else {

            if (ctrl.isPlay()) {
                ctrl.parar();
            }

            conjLlistes.removeElementAt(jListConjLists.getSelectedIndex());
            DefaultListModel list = new DefaultListModel();
            jListListOfConjLists.setModel(list);

            ctrl.eliminarLlistaDeConjLlistesRepro(jListConjLists.getSelectedIndex() + 1);

            if (conjLlistes.isEmpty()) {
                jButtonRemoveList.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jButtonRemoveListActionPerformed

    /**
     * Afegeix un fitxer a la llista
     * @param evt 
     */
    private void jButtonAddFileToListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddFileToListActionPerformed

        if (ctrl.obteMiBiblioteca().isEmpty()) {

            JOptionPane.showMessageDialog(this, "The library is empty", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else if (jListConjLists.isSelectionEmpty()) {

            JOptionPane.showMessageDialog(this, "First select a list!", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else if (conjLlistes.isEmpty()) {

            JOptionPane.showMessageDialog(this, "Lists are empty", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else {


            //Mostro els fixers que hi ha a la biblioteca
            String[] choices = new String[ctrl.obteMiBiblioteca().size()];

            int i = 0;
            for (FitxerAudio f : ctrl.obteMiBiblioteca()) {


                choices[i] = f.getNomExtensio();
                i++;

            }

            //Els mostro per pantalla, i demano que em seleccioni un
            int response = -1;
            response = JOptionPane.showOptionDialog(
                    null,
                    "To add a file in the list, select one of the library.",
                    "Library Files",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.PLAIN_MESSAGE,
                    null, choices,
                    "");
            //System.out.println(response);

            if (response != -1) {

                //Ho afegeixo al conjunt de llistes.
                ctrl.obteArrayListRepro(jListConjLists.getSelectedIndex()).add(ctrl.obteMiBiblioteca().get(response));

                //Ho mostro per pantalla
                DefaultListModel llista = new DefaultListModel();

                for (FitxerAudio fa : ctrl.obteArrayListRepro(jListConjLists.getSelectedIndex())) {

                    llista.addElement(fa.getNomExtensio());

                }

                jListListOfConjLists.setModel(llista);

            }

        }
    }//GEN-LAST:event_jButtonAddFileToListActionPerformed
    private void jListConjListsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListConjListsMouseClicked
        if (!jListConjLists.isSelectionEmpty()) {

            //Ho mostro per pantalla
            DefaultListModel llista = new DefaultListModel();

            for (FitxerAudio fa : ctrl.obteArrayListRepro(jListConjLists.getSelectedIndex())) {

                llista.addElement(fa.getNomExtensio());

            }

            jListListOfConjLists.setModel(llista);


        }
    }//GEN-LAST:event_jListConjListsMouseClicked

    /**
     * Butó que reprodueix tota la biblioteca des del començament
     * @param evt 
     */
    private void jButtonPlayLibraryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayLibraryActionPerformed

        if (!ctrl.obteMiBiblioteca().isEmpty()) {

            if (ctrl.isPlay()) {

                ctrl.parar();

            }
            try {

                ctrl.reproduir(ctrl.obteMiBiblioteca());



            } catch (FitxerAudioErrorException ex) {

                Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);

            }

            jTextFieldPlatingFile.setText(ctrl.getFitxerAudioSonant().getNomExtensio());

        } else {

            JOptionPane.showMessageDialog(this, "Library is empty", "ERROR", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_jButtonPlayLibraryActionPerformed

    /**
     * Butó que reprodueit tota una lista
     * @param evt 
     */
    private void jButtonPlayListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayListActionPerformed

        if (!ctrl.obteConjLlistes().isEmpty()) {

            if (ctrl.isPlay()) {

                ctrl.parar();

            }

            try {

                ctrl.reproduir(ctrl.obteConjLlistes().get(jListConjLists.getSelectedIndex()).getLlistaAudio());



            } catch (FitxerAudioErrorException ex) {

                Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);

            }

            jTextFieldPlatingFile.setText(ctrl.getFitxerAudioSonant().getNomExtensio());

        } else if (ctrl.obteConjLlistes().isEmpty()) {

            JOptionPane.showMessageDialog(this, "Lists are empty!", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else if (ctrl.obteConjLlistes().get(jListConjLists.getSelectedIndex()).getLlistaAudio().isEmpty()) {

            JOptionPane.showMessageDialog(this, "First add a file at the list!", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else {

            //Prueba
            System.out.println("Nunca entrará aqui!");

        }

    }//GEN-LAST:event_jButtonPlayListActionPerformed

    /**
     * Butó que reprodueix un fitxer seleccionat de la lista
     * @param evt 
     */
    private void jButtonPlaySelectedFileOfListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaySelectedFileOfListActionPerformed

        int posicioLlista = jListListOfConjLists.getSelectedIndex();
        int posicioConjLlistes = jListConjLists.getSelectedIndex();

        if (!ctrl.obteConjLlistes().isEmpty()
                && !ctrl.obteConjLlistes().get(posicioConjLlistes).getLlistaAudio().isEmpty()
                && !jListListOfConjLists.isSelectionEmpty()) {

            if (ctrl.isPlay()) {

                ctrl.parar();

            }

            try {

                ctrl.reproduir(ctrl.obteConjLlistes().get(posicioConjLlistes).getLlistaAudio().get(posicioLlista));

            } catch (FitxerAudioErrorException ex) {

                JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

            }

            jTextFieldPlatingFile.setText(ctrl.getFitxerAudioSonant().getNomExtensio());

        } else if (ctrl.obteConjLlistes().isEmpty()) {

            JOptionPane.showMessageDialog(this, "Lists are empty!", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else if (ctrl.obteConjLlistes().get(posicioConjLlistes).getLlistaAudio().isEmpty()) {

            JOptionPane.showMessageDialog(this, "First add a file at the list!", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else if (jListListOfConjLists.isSelectionEmpty()) {

            if (ctrl.isPlay()) {

                ctrl.parar();

            }

            try {

                ctrl.reproduir(ctrl.obteConjLlistes().get(0).getLlistaAudio().get(0));

            } catch (FitxerAudioErrorException ex) {

                JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

            }

        } else {

            //Prueba
            System.out.println("Nunca entrará aqui!");

        }

    }//GEN-LAST:event_jButtonPlaySelectedFileOfListActionPerformed
    
    /**
     * Butó que borra un fitxer d'una llista seleccionada
     * @param evt 
     */
    private void jButtonRemoveFileOfListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveFileOfListActionPerformed

        int posicioLlista = jListListOfConjLists.getSelectedIndex();
        int posicioConjLlistes = jListConjLists.getSelectedIndex();

        if (!ctrl.obteConjLlistes().isEmpty()
                && !ctrl.obteConjLlistes().get(posicioConjLlistes).getLlistaAudio().isEmpty()
                && !jListListOfConjLists.isSelectionEmpty()) {

            if (ctrl.getFitxerAudioSonant() == ctrl.obteMiBiblioteca().get(posicioLlista)) {

                ctrl.parar();

            }

            ctrl.obteArrayListRepro(posicioConjLlistes).remove(posicioLlista);

            DefaultListModel llista = new DefaultListModel();

            for (FitxerAudio fa : ctrl.obteArrayListRepro(jListConjLists.getSelectedIndex())) {

                llista.addElement(fa.getNomExtensio());

            }

            jListListOfConjLists.setModel(llista);

        } else if (ctrl.obteConjLlistes().isEmpty()) {

            JOptionPane.showMessageDialog(this, "Lists are empty!", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else if (ctrl.obteConjLlistes().get(posicioConjLlistes).getLlistaAudio().isEmpty()) {

            JOptionPane.showMessageDialog(this, "First add a file at the list!", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else if (jListListOfConjLists.isSelectionEmpty()) {

            JOptionPane.showMessageDialog(this, "Select a file of the list", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else {
            //Prueba
            System.out.println("Nunca entrará aqui!");

        }


    }//GEN-LAST:event_jButtonRemoveFileOfListActionPerformed
    
    /**
     * Butó que reprodueix de manera aleatoria
     * @param evt 
     */
    private void jRadioButtonRandomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonRandomItemStateChanged

        ctrl.reproCiclic();

    }//GEN-LAST:event_jRadioButtonRandomItemStateChanged
    
    /**
     * Butó que reprodueix de manera cíclica
     * @param evt 
     */
    private void jRadioButtonCyclicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCyclicItemStateChanged

        ctrl.reproCiclic();

    }//GEN-LAST:event_jRadioButtonCyclicItemStateChanged

    /**
     * MenuItem que reprodueix un fitxer seleccionat de la biblioteca
     * @param evt 
     */
    private void jMenuItemPlaySelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPlaySelectFileActionPerformed


        if (!jListBiblioteca.isSelectionEmpty()) {

            if (ctrl.isPlay()) {

                ctrl.parar();

            }

            FitxerAudio fa = ctrl.obteMiBiblioteca().get(jListBiblioteca.getSelectedIndex());
            try {

                ctrl.reproduir(fa);

            } catch (FitxerAudioErrorException ex) {

                JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

            }

            jTextFieldPlatingFile.setText(ctrl.getFitxerAudioSonant().getNomExtensio());

        }

    }//GEN-LAST:event_jMenuItemPlaySelectFileActionPerformed

    /**
     * MenuItem que reprodueix tota la llibreria
     * @param evt 
     */
    private void jMenuItemPlayAllLibraryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPlayAllLibraryActionPerformed


        if (ctrl.isPlay()) {

            ctrl.parar();

        }

        try {

            ctrl.reproduir(ctrl.obteMiBiblioteca());

        } catch (FitxerAudioErrorException ex) {

            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

        }

        jTextFieldPlatingFile.setText(ctrl.getFitxerAudioSonant().getNomExtensio());



    }//GEN-LAST:event_jMenuItemPlayAllLibraryActionPerformed

    /**
     * MenuItem que elimina un fitxer de la biblioteca
     * @param evt 
     */
    private void jMenuItemRemoveOfLibraryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRemoveOfLibraryActionPerformed

        if (!jListBiblioteca.isSelectionEmpty()) {

            if (ctrl.getFitxerAudioSonant() == ctrl.obteMiBiblioteca().get(jListBiblioteca.getSelectedIndex())) {

                ctrl.parar();

            }

            if (ctrl.getFitxerAudioSonant().getNomExtensio().equals(jTextFieldPlatingFile.getText())) {

                jTextFieldPlatingFile.setText("");

            }

            llistaBiblioteca.removeElementAt(jListBiblioteca.getSelectedIndex());
            ctrl.eliminarFitxerMiBiblioteca(jListBiblioteca.getSelectedIndex() + 1);

        }

    }//GEN-LAST:event_jMenuItemRemoveOfLibraryActionPerformed
    
    /**
     * MenuItem que borrar tots els fitxer de la biblioteca
     * @param evt 
     */
    private void jMenuItemRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRemoveAllActionPerformed

        if (ctrl.isPlay()) {

            ctrl.parar();

        }

        int i = 0;
        for (FitxerAudio f : ctrl.obteMiBiblioteca()) {

            llistaBiblioteca.removeElementAt(i);
            ctrl.eliminarFitxerMiBiblioteca(i);
            i++;
        }


    }//GEN-LAST:event_jMenuItemRemoveAllActionPerformed

    /**
     * Butó que carga la biblioteca
     * @param evt 
     */
    private void jButtonLoadLibraryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadLibraryActionPerformed
        try {

            ctrl.carregarDadesReproductor();

            for (FitxerAudio fa : ctrl.obteMiBiblioteca()) {

                llistaBiblioteca.addElement(fa.getNomExtensio());

            }

            int i = 0;
            for (LlistaReproduccio lr : ctrl.obteConjLlistes()) {

                conjLlistes.addElement(lr.getNomLlista());
                i++;

            }



        } catch (FileNotFoundException ex) {

            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {

            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

        } catch (ClassNotFoundException ex) {

            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

        }



    }//GEN-LAST:event_jButtonLoadLibraryActionPerformed
    
    /**
     * Butó que guarda tota la biblioteca
     * @param evt 
     */
    private void jButtonSaveLibraryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveLibraryActionPerformed
        try {

            ctrl.guardarDadesReproductor();

        } catch (FileNotFoundException ex) {

            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {

            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_jButtonSaveLibraryActionPerformed

    /**
     * MenuItem que crea una nova llista
     * @param evt 
     */
    private void jMenuItemNewListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewListActionPerformed

        jButtonNewListActionPerformed(evt);

    }//GEN-LAST:event_jMenuItemNewListActionPerformed

    /**
     * MenuItem que elimina una llista
     * @param evt 
     */
    private void jMenuItemRemoveListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRemoveListActionPerformed

        jButtonRemoveListActionPerformed(evt);

    }//GEN-LAST:event_jMenuItemRemoveListActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddBiblioteca;
    private javax.swing.JButton jButtonAddFileToList;
    private javax.swing.JButton jButtonLoadLibrary;
    private javax.swing.JButton jButtonNewList;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonPlay;
    private javax.swing.JButton jButtonPlayLibrary;
    private javax.swing.JButton jButtonPlayList;
    private javax.swing.JButton jButtonPlaySelectedFileOfList;
    private javax.swing.JButton jButtonPrevius;
    private javax.swing.JButton jButtonRemoveBiblioteca;
    private javax.swing.JButton jButtonRemoveFileOfList;
    private javax.swing.JButton jButtonRemoveList;
    private javax.swing.JButton jButtonSaveLibrary;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JList jListBiblioteca;
    private javax.swing.JList jListConjLists;
    private javax.swing.JList jListListOfConjLists;
    private javax.swing.JMenuItem jMenuItemNewList;
    private javax.swing.JMenuItem jMenuItemPlayAllLibrary;
    private javax.swing.JMenuItem jMenuItemPlaySelectFile;
    private javax.swing.JMenuItem jMenuItemRemoveAll;
    private javax.swing.JMenuItem jMenuItemRemoveList;
    private javax.swing.JMenuItem jMenuItemRemoveOfLibrary;
    private javax.swing.JPanel jPanelConjLists;
    private javax.swing.JPanel jPanelLibrary;
    private javax.swing.JPopupMenu jPopupMenuLibrary;
    private javax.swing.JPopupMenu jPopupMenuLists;
    private javax.swing.JRadioButton jRadioButtonCyclic;
    private javax.swing.JRadioButton jRadioButtonRandom;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedLibraryLists;
    private javax.swing.JTextField jTextFieldPlatingFile;
    private javax.swing.JTextField jTextFieldPlaying;
    private javax.swing.JTextField jTextFile;
    private javax.swing.JTextField jTextFileEntry;
    // End of variables declaration//GEN-END:variables
}
